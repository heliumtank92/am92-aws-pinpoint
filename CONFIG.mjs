const {
  npm_package_name: pkgName = '',
  npm_package_version: pkgVersion = '',

  PINPOINT_API_VERSION = '2016-12-01',
  PINPOINT_REGION = 'ap-south-1',

  PINPOINT_ENABLED = 'false',
  PINPOINT_APPLICATION_ID = '',

  PINPOINT_SMS_ORIGINATION_NUMBER = '',
  PINPOINT_SMS_SENDER_ID = '',

  PINPOINT_EMAIL_FROM_ADDRESS = '',

  PINPOINT_OTP_BRAND_NAME = '',
  PINPOINT_OTP_ORIGINATION_IDENTITY = '',
  PINPOINT_OTP_ALLOWED_ATTEMPTS = '3',
  PINPOINT_OTP_CODE_LENGTH = '6',
  PINPOINT_OTP_VALIDITY_PERIOD_IN_MIN = '5'
} = process.env

const SERVICE = `${pkgName}@${pkgVersion}`
const logFunc = console.fatal || console.error

const ENABLED = PINPOINT_ENABLED === 'true'

const REQUIRED_CONFIG = []
const MISSING_CONFIGS = []
const INT_CONFIGS = {
  PINPOINT_OTP_ALLOWED_ATTEMPTS,
  PINPOINT_OTP_CODE_LENGTH,
  PINPOINT_OTP_VALIDITY_PERIOD_IN_MIN
}
const INVALID_INT_CONFIG = {}

if (ENABLED) {
  REQUIRED_CONFIG.push('PINPOINT_APPLICATION_ID')
}

REQUIRED_CONFIG.forEach(function (key) {
  if (!process.env[key]) {
    MISSING_CONFIGS.push(key)
  }
})

if (MISSING_CONFIGS.length) {
  logFunc(`[${SERVICE} AwsPinpoint] AwsPinpoint Config Missing: ${MISSING_CONFIGS.join(', ')}`)
  process.exit(1)
}

// Handle Invalid Configs
Object.keys(INT_CONFIGS).forEach(key => {
  const value = INT_CONFIGS[key]
  INT_CONFIGS[key] = parseInt(value, 10)

  if (isNaN(INT_CONFIGS[key])) {
    INVALID_INT_CONFIG[key] = value
  }
})

if (Object.keys(INVALID_INT_CONFIG).length) {
  logFunc(`[${SERVICE} AwsPinpoint] Invalid AwsPinpoint Integer Configs:`, INVALID_INT_CONFIG)
  process.exit(1)
}

const CONNECTION_CONFIG = {
  region: PINPOINT_REGION,
  apiVersion: PINPOINT_API_VERSION
}

const CONFIG = {
  CONNECTION_CONFIG,
  APPLICATION_ID: PINPOINT_APPLICATION_ID,

  SMS_ORIGINATION_NUMBER: PINPOINT_SMS_ORIGINATION_NUMBER,
  SMS_SENDER_ID: PINPOINT_SMS_SENDER_ID,

  EMAIL_FROM_ADDRESS: PINPOINT_EMAIL_FROM_ADDRESS,

  OTP_BRAND_NAME: PINPOINT_OTP_BRAND_NAME,
  OTP_ORIGINATION_IDENTITY: PINPOINT_OTP_ORIGINATION_IDENTITY,
  OTP_ALLOWED_ATTEMPTS: INT_CONFIGS.PINPOINT_OTP_ALLOWED_ATTEMPTS,
  OTP_CODE_LENGTH: INT_CONFIGS.PINPOINT_OTP_CODE_LENGTH,
  OTP_VALIDITY_PERIOD: INT_CONFIGS.PINPOINT_OTP_VALIDITY_PERIOD_IN_MIN
}

export default CONFIG

export { SERVICE }
